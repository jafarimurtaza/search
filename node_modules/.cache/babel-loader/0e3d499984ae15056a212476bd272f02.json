{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return '';\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js"],"names":["_defineProperty","PropTypes","createConnector","cleanUpValue","refineValue","getCurrentRefinementValue","getIndexId","getId","getCurrentRefinement","props","searchState","context","id","currentRefinement","_refine","nextRefinement","nextValue","resetPage","_cleanUp","displayName","propTypes","defaultRefinement","string","getProvidedProps","searchResults","ais","contextValue","multiIndexContext","indexContextValue","isSearchStalled","refine","cleanUp","getSearchParameters","searchParameters","setQuery","getMetadata","index","items","label","concat","value","nextState"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return '';\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}