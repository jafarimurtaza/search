{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport createConnector from '../core/createConnector';\nimport { omit, getObjectType, getPropertyByPath, removeEmptyKey, removeEmptyArraysFromObject } from '../core/utils';\nimport { refineValue, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\nfunction createOptionalFilter(_ref) {\n  var attributeName = _ref.attributeName,\n      attributeValue = _ref.attributeValue,\n      attributeScore = _ref.attributeScore;\n  return \"\".concat(attributeName, \":\").concat(attributeValue, \"<score=\").concat(attributeScore || 1, \">\");\n}\n\nvar defaultProps = {\n  transformSearchParameters: function transformSearchParameters(x) {\n    return _objectSpread({}, x);\n  }\n};\n\nfunction getId() {\n  // We store the search state of this widget in `configure`.\n  return 'configure';\n}\n\nfunction getSearchParametersFromProps(props) {\n  var optionalFilters = Object.keys(props.matchingPatterns).reduce(function (acc, attributeName) {\n    var attributePattern = props.matchingPatterns[attributeName];\n    var attributeValue = getPropertyByPath(props.hit, attributeName);\n    var attributeScore = attributePattern.score;\n\n    if (Array.isArray(attributeValue)) {\n      return [].concat(_toConsumableArray(acc), [attributeValue.map(function (attributeSubValue) {\n        return createOptionalFilter({\n          attributeName: attributeName,\n          attributeValue: attributeSubValue,\n          attributeScore: attributeScore\n        });\n      })]);\n    }\n\n    if (typeof attributeValue === 'string') {\n      return [].concat(_toConsumableArray(acc), [createOptionalFilter({\n        attributeName: attributeName,\n        attributeValue: attributeValue,\n        attributeScore: attributeScore\n      })]);\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\"The `matchingPatterns` option returned a value of type \".concat(getObjectType(attributeValue), \" for the \\\"\").concat(attributeName, \"\\\" key. This value was not sent to Algolia because `optionalFilters` only supports strings and array of strings.\\n\\nYou can remove the \\\"\").concat(attributeName, \"\\\" key from the `matchingPatterns` option.\\n\\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/\"));\n    }\n\n    return acc;\n  }, []);\n  return props.transformSearchParameters(new algoliasearchHelper.SearchParameters({\n    // @ts-ignore @TODO algoliasearch-helper@3.0.1 will contain the type\n    // `sumOrFiltersScores`.\n    // See https://github.com/algolia/algoliasearch-helper-js/pull/753\n    sumOrFiltersScores: true,\n    facetFilters: [\"objectID:-\".concat(props.hit.objectID)],\n    optionalFilters: optionalFilters\n  }));\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigureRelatedItems',\n  defaultProps: defaultProps,\n  getProvidedProps: function getProvidedProps() {\n    return {};\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props) {\n    return searchParameters.setQueryParameters(getSearchParametersFromProps(props));\n  },\n  transitionState: function transitionState(props, _prevSearchState, nextSearchState) {\n    var id = getId(); // We need to transform the exhaustive search parameters back to clean\n    // search parameters without the empty default keys so we don't pollute the\n    // `configure` search state.\n\n    var searchParameters = removeEmptyArraysFromObject(removeEmptyKey(getSearchParametersFromProps(props)));\n    var searchParametersKeys = Object.keys(searchParameters);\n    var nonPresentKeys = this._searchParameters ? Object.keys(this._searchParameters).filter(function (prop) {\n      return searchParametersKeys.indexOf(prop) === -1;\n    }) : [];\n    this._searchParameters = searchParameters;\n\n    var nextValue = _defineProperty({}, id, _objectSpread({}, omit(nextSearchState[id], nonPresentKeys), searchParameters));\n\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    var _this = this;\n\n    var id = getId();\n    var indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var subState = hasMultipleIndices({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }) && searchState.indices ? searchState.indices[indexId] : searchState;\n    var configureKeys = subState && subState[id] ? Object.keys(subState[id]) : [];\n    var configureState = configureKeys.reduce(function (acc, item) {\n      if (!_this._searchParameters[item]) {\n        acc[item] = subState[id][item];\n      }\n\n      return acc;\n    }, {});\n\n    var nextValue = _defineProperty({}, id, configureState);\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/connectors/connectConfigureRelatedItems.js"],"names":["_defineProperty","_toConsumableArray","_objectSpread","algoliasearchHelper","createConnector","omit","getObjectType","getPropertyByPath","removeEmptyKey","removeEmptyArraysFromObject","refineValue","getIndexId","hasMultipleIndices","createOptionalFilter","_ref","attributeName","attributeValue","attributeScore","concat","defaultProps","transformSearchParameters","x","getId","getSearchParametersFromProps","props","optionalFilters","Object","keys","matchingPatterns","reduce","acc","attributePattern","hit","score","Array","isArray","map","attributeSubValue","process","env","NODE_ENV","console","warn","SearchParameters","sumOrFiltersScores","facetFilters","objectID","displayName","getProvidedProps","getSearchParameters","searchParameters","setQueryParameters","transitionState","_prevSearchState","nextSearchState","id","searchParametersKeys","nonPresentKeys","_searchParameters","filter","prop","indexOf","nextValue","ais","contextValue","multiIndexContext","indexContextValue","cleanUp","searchState","_this","indexId","subState","indices","configureKeys","configureState","item"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport createConnector from '../core/createConnector';\nimport { omit, getObjectType, getPropertyByPath, removeEmptyKey, removeEmptyArraysFromObject } from '../core/utils';\nimport { refineValue, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\nfunction createOptionalFilter(_ref) {\n  var attributeName = _ref.attributeName,\n      attributeValue = _ref.attributeValue,\n      attributeScore = _ref.attributeScore;\n  return \"\".concat(attributeName, \":\").concat(attributeValue, \"<score=\").concat(attributeScore || 1, \">\");\n}\n\nvar defaultProps = {\n  transformSearchParameters: function transformSearchParameters(x) {\n    return _objectSpread({}, x);\n  }\n};\n\nfunction getId() {\n  // We store the search state of this widget in `configure`.\n  return 'configure';\n}\n\nfunction getSearchParametersFromProps(props) {\n  var optionalFilters = Object.keys(props.matchingPatterns).reduce(function (acc, attributeName) {\n    var attributePattern = props.matchingPatterns[attributeName];\n    var attributeValue = getPropertyByPath(props.hit, attributeName);\n    var attributeScore = attributePattern.score;\n\n    if (Array.isArray(attributeValue)) {\n      return [].concat(_toConsumableArray(acc), [attributeValue.map(function (attributeSubValue) {\n        return createOptionalFilter({\n          attributeName: attributeName,\n          attributeValue: attributeSubValue,\n          attributeScore: attributeScore\n        });\n      })]);\n    }\n\n    if (typeof attributeValue === 'string') {\n      return [].concat(_toConsumableArray(acc), [createOptionalFilter({\n        attributeName: attributeName,\n        attributeValue: attributeValue,\n        attributeScore: attributeScore\n      })]);\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\"The `matchingPatterns` option returned a value of type \".concat(getObjectType(attributeValue), \" for the \\\"\").concat(attributeName, \"\\\" key. This value was not sent to Algolia because `optionalFilters` only supports strings and array of strings.\\n\\nYou can remove the \\\"\").concat(attributeName, \"\\\" key from the `matchingPatterns` option.\\n\\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/\"));\n    }\n\n    return acc;\n  }, []);\n  return props.transformSearchParameters(new algoliasearchHelper.SearchParameters({\n    // @ts-ignore @TODO algoliasearch-helper@3.0.1 will contain the type\n    // `sumOrFiltersScores`.\n    // See https://github.com/algolia/algoliasearch-helper-js/pull/753\n    sumOrFiltersScores: true,\n    facetFilters: [\"objectID:-\".concat(props.hit.objectID)],\n    optionalFilters: optionalFilters\n  }));\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigureRelatedItems',\n  defaultProps: defaultProps,\n  getProvidedProps: function getProvidedProps() {\n    return {};\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props) {\n    return searchParameters.setQueryParameters(getSearchParametersFromProps(props));\n  },\n  transitionState: function transitionState(props, _prevSearchState, nextSearchState) {\n    var id = getId(); // We need to transform the exhaustive search parameters back to clean\n    // search parameters without the empty default keys so we don't pollute the\n    // `configure` search state.\n\n    var searchParameters = removeEmptyArraysFromObject(removeEmptyKey(getSearchParametersFromProps(props)));\n    var searchParametersKeys = Object.keys(searchParameters);\n    var nonPresentKeys = this._searchParameters ? Object.keys(this._searchParameters).filter(function (prop) {\n      return searchParametersKeys.indexOf(prop) === -1;\n    }) : [];\n    this._searchParameters = searchParameters;\n\n    var nextValue = _defineProperty({}, id, _objectSpread({}, omit(nextSearchState[id], nonPresentKeys), searchParameters));\n\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    var _this = this;\n\n    var id = getId();\n    var indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var subState = hasMultipleIndices({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }) && searchState.indices ? searchState.indices[indexId] : searchState;\n    var configureKeys = subState && subState[id] ? Object.keys(subState[id]) : [];\n    var configureState = configureKeys.reduce(function (acc, item) {\n      if (!_this._searchParameters[item]) {\n        acc[item] = subState[id][item];\n      }\n\n      return acc;\n    }, {});\n\n    var nextValue = _defineProperty({}, id, configureState);\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  }\n});"]},"metadata":{},"sourceType":"module"}