{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\nfunction inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      currentHit = _ref.currentHit;\n  var index = results.index;\n  var queryID = currentHit.__queryID;\n  var objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(\"Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\\nSee: https://alg.li/VpPpLt\");\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = [currentHit.__position];\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method \\\"\".concat(method, \"\\\" passed to the insights function. The supported methods are: \\\"clickedObjectIDsAfterSearch\\\", \\\"convertedObjectIDsAfterSearch\\\".\"));\n  }\n}\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, currentHit) {\n  return function (method, payload) {\n    if (typeof aa !== 'function') {\n      throw new TypeError(\"Expected insightsClient to be a Function\");\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      currentHit: currentHit\n    });\n    aa(method, _objectSpread({}, inferredPayload, payload));\n  };\n};\n\nexport default (function (insightsClient) {\n  return createConnector({\n    displayName: 'AlgoliaInsights',\n    getProvidedProps: function getProvidedProps(props, _, searchResults) {\n      var results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      });\n      var insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return {\n        insights: insights\n      };\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/connectors/connectHitInsights.js"],"names":["_objectSpread","createConnector","getResults","inferPayload","_ref","method","results","currentHit","index","queryID","__queryID","objectIDs","objectID","Error","positions","__position","concat","wrapInsightsClient","aa","payload","TypeError","inferredPayload","insightsClient","displayName","getProvidedProps","props","_","searchResults","ais","contextValue","multiIndexContext","indexContextValue","insights","hit"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,yCAA1B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,UAAU,GAAGH,IAAI,CAACG,UAFtB;AAGA,MAAIC,KAAK,GAAGF,OAAO,CAACE,KAApB;AACA,MAAIC,OAAO,GAAGF,UAAU,CAACG,SAAzB;AACA,MAAIC,SAAS,GAAG,CAACJ,UAAU,CAACK,QAAZ,CAAhB;;AAEA,MAAI,CAACH,OAAL,EAAc;AACZ,UAAM,IAAII,KAAJ,CAAU,2HAAV,CAAN;AACD;;AAED,UAAQR,MAAR;AACE,SAAK,6BAAL;AACE;AACE,YAAIS,SAAS,GAAG,CAACP,UAAU,CAACQ,UAAZ,CAAhB;AACA,eAAO;AACLP,UAAAA,KAAK,EAAEA,KADF;AAELC,UAAAA,OAAO,EAAEA,OAFJ;AAGLE,UAAAA,SAAS,EAAEA,SAHN;AAILG,UAAAA,SAAS,EAAEA;AAJN,SAAP;AAMD;;AAEH,SAAK,+BAAL;AACE,aAAO;AACLN,QAAAA,KAAK,EAAEA,KADF;AAELC,QAAAA,OAAO,EAAEA,OAFJ;AAGLE,QAAAA,SAAS,EAAEA;AAHN,OAAP;;AAMF;AACE,YAAM,IAAIE,KAAJ,CAAU,wBAAwBG,MAAxB,CAA+BX,MAA/B,EAAuC,oIAAvC,CAAV,CAAN;AApBJ;AAsBD;;AAED,IAAIY,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,EAA5B,EAAgCZ,OAAhC,EAAyCC,UAAzC,EAAqD;AAC5E,SAAO,UAAUF,MAAV,EAAkBc,OAAlB,EAA2B;AAChC,QAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5B,YAAM,IAAIE,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED,QAAIC,eAAe,GAAGlB,YAAY,CAAC;AACjCE,MAAAA,MAAM,EAAEA,MADyB;AAEjCC,MAAAA,OAAO,EAAEA,OAFwB;AAGjCC,MAAAA,UAAU,EAAEA;AAHqB,KAAD,CAAlC;AAKAW,IAAAA,EAAE,CAACb,MAAD,EAASL,aAAa,CAAC,EAAD,EAAKqB,eAAL,EAAsBF,OAAtB,CAAtB,CAAF;AACD,GAXD;AAYD,CAbD;;AAeA,gBAAgB,UAAUG,cAAV,EAA0B;AACxC,SAAOrB,eAAe,CAAC;AACrBsB,IAAAA,WAAW,EAAE,iBADQ;AAErBC,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,CAAjC,EAAoCC,aAApC,EAAmD;AACnE,UAAIrB,OAAO,GAAGJ,UAAU,CAACyB,aAAD,EAAgB;AACtCC,QAAAA,GAAG,EAAEH,KAAK,CAACI,YAD2B;AAEtCC,QAAAA,iBAAiB,EAAEL,KAAK,CAACM;AAFa,OAAhB,CAAxB;AAIA,UAAIC,QAAQ,GAAGf,kBAAkB,CAACK,cAAD,EAAiBhB,OAAjB,EAA0BmB,KAAK,CAACQ,GAAhC,CAAjC;AACA,aAAO;AACLD,QAAAA,QAAQ,EAAEA;AADL,OAAP;AAGD;AAXoB,GAAD,CAAtB;AAaD,CAdD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\nfunction inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      currentHit = _ref.currentHit;\n  var index = results.index;\n  var queryID = currentHit.__queryID;\n  var objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(\"Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\\nSee: https://alg.li/VpPpLt\");\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = [currentHit.__position];\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method \\\"\".concat(method, \"\\\" passed to the insights function. The supported methods are: \\\"clickedObjectIDsAfterSearch\\\", \\\"convertedObjectIDsAfterSearch\\\".\"));\n  }\n}\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, currentHit) {\n  return function (method, payload) {\n    if (typeof aa !== 'function') {\n      throw new TypeError(\"Expected insightsClient to be a Function\");\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      currentHit: currentHit\n    });\n    aa(method, _objectSpread({}, inferredPayload, payload));\n  };\n};\n\nexport default (function (insightsClient) {\n  return createConnector({\n    displayName: 'AlgoliaInsights',\n    getProvidedProps: function getProvidedProps(props, _, searchResults) {\n      var results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      });\n      var insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return {\n        insights: insights\n      };\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}