{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { InstantSearchConsumer, IndexProvider } from '../core/context';\n\nfunction getIndexContext(props) {\n  return {\n    targetedIndex: props.indexId\n  };\n}\n/**\n * The component that allows you to apply widgets to a dedicated index. It's\n * useful if you want to build an interface that targets multiple indices.\n *\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Index, SearchBox, Hits, Configure } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <SearchBox />\n *     <Index indexName=\"instant_search\">\n *       <Hits />\n *     </Index>\n *     <Index indexName=\"bestbuy\">\n *       <Hits />\n *     </Index>\n *   </InstantSearch>\n * );\n */\n\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  _createClass(Index, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props) {\n      return {\n        indexContext: getIndexContext(props)\n      };\n    }\n  }]);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      indexContext: getIndexContext(_this.props)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unregisterWidget\", void 0);\n\n    _this.props.contextValue.onSearchParameters(_this.getSearchParameters.bind(_assertThisInitialized(_this)), {\n      ais: _this.props.contextValue,\n      multiIndexContext: _this.state.indexContext\n    }, _this.props, undefined);\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unregisterWidget = this.props.contextValue.widgetsManager.registerWidget(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.indexName !== prevProps.indexName) {\n        this.props.contextValue.widgetsManager.update();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (typeof this.unregisterWidget === 'function') {\n        this.unregisterWidget();\n      }\n    }\n  }, {\n    key: \"getSearchParameters\",\n    value: function getSearchParameters(searchParameters, props) {\n      return searchParameters.setIndex(this.props ? this.props.indexName : props.indexName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childrenCount = Children.count(this.props.children);\n\n      if (childrenCount === 0) {\n        return null;\n      }\n\n      return React.createElement(IndexProvider, {\n        value: this.state.indexContext\n      }, this.props.children);\n    }\n  }]);\n\n  return Index;\n}(Component);\n\n_defineProperty(Index, \"propTypes\", {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string.isRequired,\n  children: PropTypes.node\n});\n\nvar IndexWrapper = function IndexWrapper(props) {\n  var inferredIndexId = props.indexName;\n  return React.createElement(InstantSearchConsumer, null, function (contextValue) {\n    return React.createElement(Index, _extends({\n      contextValue: contextValue,\n      indexId: inferredIndexId\n    }, props));\n  });\n};\n\nIndexWrapper.propTypes = {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string\n};\nexport var IndexComponentWithoutContext = Index;\nexport default IndexWrapper;","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/widgets/Index.js"],"names":["_extends","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_createClass","_inherits","_defineProperty","React","Component","Children","PropTypes","InstantSearchConsumer","IndexProvider","getIndexContext","props","targetedIndex","indexId","Index","_Component","key","value","getDerivedStateFromProps","indexContext","_this","call","contextValue","onSearchParameters","getSearchParameters","bind","ais","multiIndexContext","state","undefined","componentDidMount","unregisterWidget","widgetsManager","registerWidget","componentDidUpdate","prevProps","indexName","update","componentWillUnmount","searchParameters","setIndex","render","childrenCount","count","children","createElement","string","isRequired","node","IndexWrapper","inferredIndexId","propTypes","IndexComponentWithoutContext"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { InstantSearchConsumer, IndexProvider } from '../core/context';\n\nfunction getIndexContext(props) {\n  return {\n    targetedIndex: props.indexId\n  };\n}\n\n/**\n * The component that allows you to apply widgets to a dedicated index. It's\n * useful if you want to build an interface that targets multiple indices.\n *\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Index, SearchBox, Hits, Configure } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <SearchBox />\n *     <Index indexName=\"instant_search\">\n *       <Hits />\n *     </Index>\n *     <Index indexName=\"bestbuy\">\n *       <Hits />\n *     </Index>\n *   </InstantSearch>\n * );\n */\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  _createClass(Index, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props) {\n      return {\n        indexContext: getIndexContext(props)\n      };\n    }\n  }]);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      indexContext: getIndexContext(_this.props)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unregisterWidget\", void 0);\n\n    _this.props.contextValue.onSearchParameters(_this.getSearchParameters.bind(_assertThisInitialized(_this)), {\n      ais: _this.props.contextValue,\n      multiIndexContext: _this.state.indexContext\n    }, _this.props, undefined);\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unregisterWidget = this.props.contextValue.widgetsManager.registerWidget(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.indexName !== prevProps.indexName) {\n        this.props.contextValue.widgetsManager.update();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (typeof this.unregisterWidget === 'function') {\n        this.unregisterWidget();\n      }\n    }\n  }, {\n    key: \"getSearchParameters\",\n    value: function getSearchParameters(searchParameters, props) {\n      return searchParameters.setIndex(this.props ? this.props.indexName : props.indexName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childrenCount = Children.count(this.props.children);\n\n      if (childrenCount === 0) {\n        return null;\n      }\n\n      return React.createElement(IndexProvider, {\n        value: this.state.indexContext\n      }, this.props.children);\n    }\n  }]);\n\n  return Index;\n}(Component);\n\n_defineProperty(Index, \"propTypes\", {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string.isRequired,\n  children: PropTypes.node\n});\n\nvar IndexWrapper = function IndexWrapper(props) {\n  var inferredIndexId = props.indexName;\n  return React.createElement(InstantSearchConsumer, null, function (contextValue) {\n    return React.createElement(Index, _extends({\n      contextValue: contextValue,\n      indexId: inferredIndexId\n    }, props));\n  });\n};\n\nIndexWrapper.propTypes = {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string\n};\nexport var IndexComponentWithoutContext = Index;\nexport default IndexWrapper;"]},"metadata":{},"sourceType":"module"}