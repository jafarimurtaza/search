{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport createConnector from '../core/createConnector';\nimport { getResults, getIndexId, hasMultipleIndices } from '../core/indexUtils'; // A context rule must consist only of alphanumeric characters, hyphens, and underscores.\n// See https://www.algolia.com/doc/guides/managing-results/refine-results/merchandising-and-promoting/in-depth/implementing-query-rules/#context\n\nfunction escapeRuleContext(ruleName) {\n  return ruleName.replace(/[^a-z0-9-_]+/gi, '_');\n}\n\nfunction getWidgetRefinements(attribute, widgetKey, searchState) {\n  var widgetState = searchState[widgetKey];\n\n  switch (widgetKey) {\n    case 'range':\n      return Object.keys(widgetState[attribute]).map(function (rangeKey) {\n        return widgetState[attribute][rangeKey];\n      });\n\n    case 'refinementList':\n      return widgetState[attribute];\n\n    case 'hierarchicalMenu':\n      return [widgetState[attribute]];\n\n    case 'menu':\n      return [widgetState[attribute]];\n\n    case 'multiRange':\n      return widgetState[attribute].split(':');\n\n    case 'toggle':\n      return [widgetState[attribute]];\n\n    default:\n      return [];\n  }\n}\n\nfunction getRefinements(attribute) {\n  var searchState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var refinements = Object.keys(searchState).filter(function (widgetKey) {\n    return searchState[widgetKey] !== undefined && searchState[widgetKey][attribute] !== undefined;\n  }).map(function (widgetKey) {\n    return getWidgetRefinements(attribute, widgetKey, searchState);\n  }).reduce(function (acc, current) {\n    return acc.concat(current);\n  }, []); // flatten the refinements\n\n  return refinements;\n}\n\nfunction getRuleContextsFromTrackedFilters(_ref) {\n  var searchState = _ref.searchState,\n      trackedFilters = _ref.trackedFilters;\n  var ruleContexts = Object.keys(trackedFilters).reduce(function (facets, facetName) {\n    var facetRefinements = getRefinements(facetName, searchState);\n    var getTrackedFacetValues = trackedFilters[facetName];\n    var trackedFacetValues = getTrackedFacetValues(facetRefinements);\n    return [].concat(_toConsumableArray(facets), _toConsumableArray(facetRefinements.filter(function (facetRefinement) {\n      return trackedFacetValues.includes(facetRefinement);\n    }).map(function (facetValue) {\n      return escapeRuleContext(\"ais-\".concat(facetName, \"-\").concat(facetValue));\n    })));\n  }, []);\n  return ruleContexts;\n}\n\nvar defaultProps = {\n  transformItems: function transformItems(items) {\n    return items;\n  },\n  transformRuleContexts: function transformRuleContexts(ruleContexts) {\n    return ruleContexts;\n  },\n  trackedFilters: {}\n};\nexport default createConnector({\n  displayName: 'AlgoliaQueryRules',\n  defaultProps: defaultProps,\n  getProvidedProps: function getProvidedProps(props, _1, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (results === null) {\n      return {\n        items: [],\n        canRefine: false\n      };\n    }\n\n    var _results$userData = results.userData,\n        userData = _results$userData === void 0 ? [] : _results$userData;\n    var transformItems = props.transformItems;\n    var transformedItems = transformItems(userData);\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    if (Object.keys(props.trackedFilters).length === 0) {\n      return searchParameters;\n    }\n\n    var indexSearchState = hasMultipleIndices({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }) && searchState.indices ? searchState.indices[getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    })] : searchState;\n    var newRuleContexts = getRuleContextsFromTrackedFilters({\n      searchState: indexSearchState,\n      trackedFilters: props.trackedFilters\n    });\n    var initialRuleContexts = searchParameters.ruleContexts || [];\n    var nextRuleContexts = [].concat(_toConsumableArray(initialRuleContexts), _toConsumableArray(newRuleContexts));\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nextRuleContexts.length > 10) {\n        // eslint-disable-next-line no-console\n        console.warn(\"The maximum number of `ruleContexts` is 10. They have been sliced to that limit.\\nConsider using `transformRuleContexts` to minimize the number of rules sent to Algolia.\");\n      }\n    }\n\n    var ruleContexts = props.transformRuleContexts(nextRuleContexts).slice(0, 10);\n    return searchParameters.setQueryParameter('ruleContexts', ruleContexts);\n  }\n});","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/connectors/connectQueryRules.js"],"names":["_toConsumableArray","createConnector","getResults","getIndexId","hasMultipleIndices","escapeRuleContext","ruleName","replace","getWidgetRefinements","attribute","widgetKey","searchState","widgetState","Object","keys","map","rangeKey","split","getRefinements","arguments","length","undefined","refinements","filter","reduce","acc","current","concat","getRuleContextsFromTrackedFilters","_ref","trackedFilters","ruleContexts","facets","facetName","facetRefinements","getTrackedFacetValues","trackedFacetValues","facetRefinement","includes","facetValue","defaultProps","transformItems","items","transformRuleContexts","displayName","getProvidedProps","props","_1","searchResults","results","ais","contextValue","multiIndexContext","indexContextValue","canRefine","_results$userData","userData","transformedItems","getSearchParameters","searchParameters","indexSearchState","indices","newRuleContexts","initialRuleContexts","nextRuleContexts","process","env","NODE_ENV","console","warn","slice","setQueryParameter"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport createConnector from '../core/createConnector';\nimport { getResults, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\n// A context rule must consist only of alphanumeric characters, hyphens, and underscores.\n// See https://www.algolia.com/doc/guides/managing-results/refine-results/merchandising-and-promoting/in-depth/implementing-query-rules/#context\nfunction escapeRuleContext(ruleName) {\n  return ruleName.replace(/[^a-z0-9-_]+/gi, '_');\n}\n\nfunction getWidgetRefinements(attribute, widgetKey, searchState) {\n  var widgetState = searchState[widgetKey];\n\n  switch (widgetKey) {\n    case 'range':\n      return Object.keys(widgetState[attribute]).map(function (rangeKey) {\n        return widgetState[attribute][rangeKey];\n      });\n\n    case 'refinementList':\n      return widgetState[attribute];\n\n    case 'hierarchicalMenu':\n      return [widgetState[attribute]];\n\n    case 'menu':\n      return [widgetState[attribute]];\n\n    case 'multiRange':\n      return widgetState[attribute].split(':');\n\n    case 'toggle':\n      return [widgetState[attribute]];\n\n    default:\n      return [];\n  }\n}\n\nfunction getRefinements(attribute) {\n  var searchState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var refinements = Object.keys(searchState).filter(function (widgetKey) {\n    return searchState[widgetKey] !== undefined && searchState[widgetKey][attribute] !== undefined;\n  }).map(function (widgetKey) {\n    return getWidgetRefinements(attribute, widgetKey, searchState);\n  }).reduce(function (acc, current) {\n    return acc.concat(current);\n  }, []); // flatten the refinements\n\n  return refinements;\n}\n\nfunction getRuleContextsFromTrackedFilters(_ref) {\n  var searchState = _ref.searchState,\n      trackedFilters = _ref.trackedFilters;\n  var ruleContexts = Object.keys(trackedFilters).reduce(function (facets, facetName) {\n    var facetRefinements = getRefinements(facetName, searchState);\n    var getTrackedFacetValues = trackedFilters[facetName];\n    var trackedFacetValues = getTrackedFacetValues(facetRefinements);\n    return [].concat(_toConsumableArray(facets), _toConsumableArray(facetRefinements.filter(function (facetRefinement) {\n      return trackedFacetValues.includes(facetRefinement);\n    }).map(function (facetValue) {\n      return escapeRuleContext(\"ais-\".concat(facetName, \"-\").concat(facetValue));\n    })));\n  }, []);\n  return ruleContexts;\n}\n\nvar defaultProps = {\n  transformItems: function transformItems(items) {\n    return items;\n  },\n  transformRuleContexts: function transformRuleContexts(ruleContexts) {\n    return ruleContexts;\n  },\n  trackedFilters: {}\n};\nexport default createConnector({\n  displayName: 'AlgoliaQueryRules',\n  defaultProps: defaultProps,\n  getProvidedProps: function getProvidedProps(props, _1, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (results === null) {\n      return {\n        items: [],\n        canRefine: false\n      };\n    }\n\n    var _results$userData = results.userData,\n        userData = _results$userData === void 0 ? [] : _results$userData;\n    var transformItems = props.transformItems;\n    var transformedItems = transformItems(userData);\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    if (Object.keys(props.trackedFilters).length === 0) {\n      return searchParameters;\n    }\n\n    var indexSearchState = hasMultipleIndices({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }) && searchState.indices ? searchState.indices[getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    })] : searchState;\n    var newRuleContexts = getRuleContextsFromTrackedFilters({\n      searchState: indexSearchState,\n      trackedFilters: props.trackedFilters\n    });\n    var initialRuleContexts = searchParameters.ruleContexts || [];\n    var nextRuleContexts = [].concat(_toConsumableArray(initialRuleContexts), _toConsumableArray(newRuleContexts));\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nextRuleContexts.length > 10) {\n        // eslint-disable-next-line no-console\n        console.warn(\"The maximum number of `ruleContexts` is 10. They have been sliced to that limit.\\nConsider using `transformRuleContexts` to minimize the number of rules sent to Algolia.\");\n      }\n    }\n\n    var ruleContexts = props.transformRuleContexts(nextRuleContexts).slice(0, 10);\n    return searchParameters.setQueryParameter('ruleContexts', ruleContexts);\n  }\n});"]},"metadata":{},"sourceType":"module"}