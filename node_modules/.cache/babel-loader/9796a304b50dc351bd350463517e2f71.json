{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from '../core/indexUtils';\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return null;\n}\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread({}, item, {\n        isRefined: true\n      }) : _objectSpread({}, item, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/connectors/connectSortBy.js"],"names":["_defineProperty","_objectSpread","PropTypes","createConnector","cleanUpValue","refineValue","getCurrentRefinementValue","getId","getCurrentRefinement","props","searchState","context","id","currentRefinement","displayName","propTypes","defaultRefinement","string","items","arrayOf","shape","label","value","isRequired","transformItems","func","getProvidedProps","ais","contextValue","multiIndexContext","indexContextValue","map","item","isRefined","refine","nextRefinement","nextValue","resetPage","cleanUp","getSearchParameters","searchParameters","selectedIndex","setIndex","getMetadata"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from '../core/indexUtils';\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return null;\n}\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread({}, item, {\n        isRefined: true\n      }) : _objectSpread({}, item, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}