{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\"; // copied from https://github.com/algolia/instantsearch.js/blob/688e36a67bb4c63d008d8abc02257a7b7c04e513/src/lib/voiceSearchHelper/index.ts\n\nexport default function createVoiceSearchHelper(_ref) {\n  var searchAsYouSpeak = _ref.searchAsYouSpeak,\n      language = _ref.language,\n      onQueryChange = _ref.onQueryChange,\n      onStateChange = _ref.onStateChange;\n  var SpeechRecognitionAPI = window.webkitSpeechRecognition || window.SpeechRecognition;\n\n  var getDefaultState = function getDefaultState(status) {\n    return {\n      status: status,\n      transcript: '',\n      isSpeechFinal: false,\n      errorCode: undefined\n    };\n  };\n\n  var state = getDefaultState('initial');\n  var recognition;\n\n  var isBrowserSupported = function isBrowserSupported() {\n    return Boolean(SpeechRecognitionAPI);\n  };\n\n  var isListening = function isListening() {\n    return state.status === 'askingPermission' || state.status === 'waiting' || state.status === 'recognizing';\n  };\n\n  var setState = function setState() {\n    var newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    state = _objectSpread({}, state, newState);\n    onStateChange();\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var resetState = function resetState() {\n    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n    setState(getDefaultState(status));\n  };\n\n  var onStart = function onStart() {\n    setState({\n      status: 'waiting'\n    });\n  };\n\n  var onError = function onError(event) {\n    setState({\n      status: 'error',\n      errorCode: event.error\n    });\n  };\n\n  var onResult = function onResult(event) {\n    setState({\n      status: 'recognizing',\n      transcript: event.results[0] && event.results[0][0] && event.results[0][0].transcript || '',\n      isSpeechFinal: event.results[0] && event.results[0].isFinal\n    });\n\n    if (searchAsYouSpeak && state.transcript) {\n      onQueryChange(state.transcript);\n    }\n  };\n\n  var onEnd = function onEnd() {\n    if (!state.errorCode && state.transcript && !searchAsYouSpeak) {\n      onQueryChange(state.transcript);\n    }\n\n    if (state.status !== 'error') {\n      setState({\n        status: 'finished'\n      });\n    }\n  };\n\n  var start = function start() {\n    recognition = new SpeechRecognitionAPI();\n\n    if (!recognition) {\n      return;\n    }\n\n    resetState('askingPermission');\n    recognition.interimResults = true;\n\n    if (language) {\n      recognition.lang = language;\n    }\n\n    recognition.addEventListener('start', onStart);\n    recognition.addEventListener('error', onError);\n    recognition.addEventListener('result', onResult);\n    recognition.addEventListener('end', onEnd);\n    recognition.start();\n  };\n\n  var dispose = function dispose() {\n    if (!recognition) {\n      return;\n    }\n\n    recognition.stop();\n    recognition.removeEventListener('start', onStart);\n    recognition.removeEventListener('error', onError);\n    recognition.removeEventListener('result', onResult);\n    recognition.removeEventListener('end', onEnd);\n    recognition = undefined;\n  };\n\n  var stop = function stop() {\n    dispose(); // Because `dispose` removes event listeners, `end` listener is not called.\n    // So we're setting the `status` as `finished` here.\n    // If we don't do it, it will be still `waiting` or `recognizing`.\n\n    resetState('finished');\n  };\n\n  var toggleListening = function toggleListening() {\n    if (!isBrowserSupported()) {\n      return;\n    }\n\n    if (isListening()) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return {\n    getState: getState,\n    isBrowserSupported: isBrowserSupported,\n    isListening: isListening,\n    toggleListening: toggleListening,\n    dispose: dispose\n  };\n}","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-dom/dist/es/lib/voiceSearchHelper/index.js"],"names":["_objectSpread","createVoiceSearchHelper","_ref","searchAsYouSpeak","language","onQueryChange","onStateChange","SpeechRecognitionAPI","window","webkitSpeechRecognition","SpeechRecognition","getDefaultState","status","transcript","isSpeechFinal","errorCode","undefined","state","recognition","isBrowserSupported","Boolean","isListening","setState","newState","arguments","length","getState","resetState","onStart","onError","event","error","onResult","results","isFinal","onEnd","start","interimResults","lang","addEventListener","dispose","stop","removeEventListener","toggleListening"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,yCAA1B,C,CACA;;AACA,eAAe,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AACpD,MAAIC,gBAAgB,GAAGD,IAAI,CAACC,gBAA5B;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAAA,MAEIC,aAAa,GAAGH,IAAI,CAACG,aAFzB;AAAA,MAGIC,aAAa,GAAGJ,IAAI,CAACI,aAHzB;AAIA,MAAIC,oBAAoB,GAAGC,MAAM,CAACC,uBAAP,IAAkCD,MAAM,CAACE,iBAApE;;AAEA,MAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AACrD,WAAO;AACLA,MAAAA,MAAM,EAAEA,MADH;AAELC,MAAAA,UAAU,EAAE,EAFP;AAGLC,MAAAA,aAAa,EAAE,KAHV;AAILC,MAAAA,SAAS,EAAEC;AAJN,KAAP;AAMD,GAPD;;AASA,MAAIC,KAAK,GAAGN,eAAe,CAAC,SAAD,CAA3B;AACA,MAAIO,WAAJ;;AAEA,MAAIC,kBAAkB,GAAG,SAASA,kBAAT,GAA8B;AACrD,WAAOC,OAAO,CAACb,oBAAD,CAAd;AACD,GAFD;;AAIA,MAAIc,WAAW,GAAG,SAASA,WAAT,GAAuB;AACvC,WAAOJ,KAAK,CAACL,MAAN,KAAiB,kBAAjB,IAAuCK,KAAK,CAACL,MAAN,KAAiB,SAAxD,IAAqEK,KAAK,CAACL,MAAN,KAAiB,aAA7F;AACD,GAFD;;AAIA,MAAIU,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjC,QAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBR,SAAzC,GAAqDQ,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAnF;AACAP,IAAAA,KAAK,GAAGjB,aAAa,CAAC,EAAD,EAAKiB,KAAL,EAAYM,QAAZ,CAArB;AACAjB,IAAAA,aAAa;AACd,GAJD;;AAMA,MAAIoB,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjC,WAAOT,KAAP;AACD,GAFD;;AAIA,MAAIU,UAAU,GAAG,SAASA,UAAT,GAAsB;AACrC,QAAIf,MAAM,GAAGY,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBR,SAAzC,GAAqDQ,SAAS,CAAC,CAAD,CAA9D,GAAoE,SAAjF;AACAF,IAAAA,QAAQ,CAACX,eAAe,CAACC,MAAD,CAAhB,CAAR;AACD,GAHD;;AAKA,MAAIgB,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/BN,IAAAA,QAAQ,CAAC;AACPV,MAAAA,MAAM,EAAE;AADD,KAAD,CAAR;AAGD,GAJD;;AAMA,MAAIiB,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACpCR,IAAAA,QAAQ,CAAC;AACPV,MAAAA,MAAM,EAAE,OADD;AAEPG,MAAAA,SAAS,EAAEe,KAAK,CAACC;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,MAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBF,KAAlB,EAAyB;AACtCR,IAAAA,QAAQ,CAAC;AACPV,MAAAA,MAAM,EAAE,aADD;AAEPC,MAAAA,UAAU,EAAEiB,KAAK,CAACG,OAAN,CAAc,CAAd,KAAoBH,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAApB,IAA2CH,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoBpB,UAA/D,IAA6E,EAFlF;AAGPC,MAAAA,aAAa,EAAEgB,KAAK,CAACG,OAAN,CAAc,CAAd,KAAoBH,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBC;AAH7C,KAAD,CAAR;;AAMA,QAAI/B,gBAAgB,IAAIc,KAAK,CAACJ,UAA9B,EAA0C;AACxCR,MAAAA,aAAa,CAACY,KAAK,CAACJ,UAAP,CAAb;AACD;AACF,GAVD;;AAYA,MAAIsB,KAAK,GAAG,SAASA,KAAT,GAAiB;AAC3B,QAAI,CAAClB,KAAK,CAACF,SAAP,IAAoBE,KAAK,CAACJ,UAA1B,IAAwC,CAACV,gBAA7C,EAA+D;AAC7DE,MAAAA,aAAa,CAACY,KAAK,CAACJ,UAAP,CAAb;AACD;;AAED,QAAII,KAAK,CAACL,MAAN,KAAiB,OAArB,EAA8B;AAC5BU,MAAAA,QAAQ,CAAC;AACPV,QAAAA,MAAM,EAAE;AADD,OAAD,CAAR;AAGD;AACF,GAVD;;AAYA,MAAIwB,KAAK,GAAG,SAASA,KAAT,GAAiB;AAC3BlB,IAAAA,WAAW,GAAG,IAAIX,oBAAJ,EAAd;;AAEA,QAAI,CAACW,WAAL,EAAkB;AAChB;AACD;;AAEDS,IAAAA,UAAU,CAAC,kBAAD,CAAV;AACAT,IAAAA,WAAW,CAACmB,cAAZ,GAA6B,IAA7B;;AAEA,QAAIjC,QAAJ,EAAc;AACZc,MAAAA,WAAW,CAACoB,IAAZ,GAAmBlC,QAAnB;AACD;;AAEDc,IAAAA,WAAW,CAACqB,gBAAZ,CAA6B,OAA7B,EAAsCX,OAAtC;AACAV,IAAAA,WAAW,CAACqB,gBAAZ,CAA6B,OAA7B,EAAsCV,OAAtC;AACAX,IAAAA,WAAW,CAACqB,gBAAZ,CAA6B,QAA7B,EAAuCP,QAAvC;AACAd,IAAAA,WAAW,CAACqB,gBAAZ,CAA6B,KAA7B,EAAoCJ,KAApC;AACAjB,IAAAA,WAAW,CAACkB,KAAZ;AACD,GAnBD;;AAqBA,MAAII,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/B,QAAI,CAACtB,WAAL,EAAkB;AAChB;AACD;;AAEDA,IAAAA,WAAW,CAACuB,IAAZ;AACAvB,IAAAA,WAAW,CAACwB,mBAAZ,CAAgC,OAAhC,EAAyCd,OAAzC;AACAV,IAAAA,WAAW,CAACwB,mBAAZ,CAAgC,OAAhC,EAAyCb,OAAzC;AACAX,IAAAA,WAAW,CAACwB,mBAAZ,CAAgC,QAAhC,EAA0CV,QAA1C;AACAd,IAAAA,WAAW,CAACwB,mBAAZ,CAAgC,KAAhC,EAAuCP,KAAvC;AACAjB,IAAAA,WAAW,GAAGF,SAAd;AACD,GAXD;;AAaA,MAAIyB,IAAI,GAAG,SAASA,IAAT,GAAgB;AACzBD,IAAAA,OAAO,GADkB,CACd;AACX;AACA;;AAEAb,IAAAA,UAAU,CAAC,UAAD,CAAV;AACD,GAND;;AAQA,MAAIgB,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C,QAAI,CAACxB,kBAAkB,EAAvB,EAA2B;AACzB;AACD;;AAED,QAAIE,WAAW,EAAf,EAAmB;AACjBoB,MAAAA,IAAI;AACL,KAFD,MAEO;AACLL,MAAAA,KAAK;AACN;AACF,GAVD;;AAYA,SAAO;AACLV,IAAAA,QAAQ,EAAEA,QADL;AAELP,IAAAA,kBAAkB,EAAEA,kBAFf;AAGLE,IAAAA,WAAW,EAAEA,WAHR;AAILsB,IAAAA,eAAe,EAAEA,eAJZ;AAKLH,IAAAA,OAAO,EAAEA;AALJ,GAAP;AAOD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n// copied from https://github.com/algolia/instantsearch.js/blob/688e36a67bb4c63d008d8abc02257a7b7c04e513/src/lib/voiceSearchHelper/index.ts\nexport default function createVoiceSearchHelper(_ref) {\n  var searchAsYouSpeak = _ref.searchAsYouSpeak,\n      language = _ref.language,\n      onQueryChange = _ref.onQueryChange,\n      onStateChange = _ref.onStateChange;\n  var SpeechRecognitionAPI = window.webkitSpeechRecognition || window.SpeechRecognition;\n\n  var getDefaultState = function getDefaultState(status) {\n    return {\n      status: status,\n      transcript: '',\n      isSpeechFinal: false,\n      errorCode: undefined\n    };\n  };\n\n  var state = getDefaultState('initial');\n  var recognition;\n\n  var isBrowserSupported = function isBrowserSupported() {\n    return Boolean(SpeechRecognitionAPI);\n  };\n\n  var isListening = function isListening() {\n    return state.status === 'askingPermission' || state.status === 'waiting' || state.status === 'recognizing';\n  };\n\n  var setState = function setState() {\n    var newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    state = _objectSpread({}, state, newState);\n    onStateChange();\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var resetState = function resetState() {\n    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n    setState(getDefaultState(status));\n  };\n\n  var onStart = function onStart() {\n    setState({\n      status: 'waiting'\n    });\n  };\n\n  var onError = function onError(event) {\n    setState({\n      status: 'error',\n      errorCode: event.error\n    });\n  };\n\n  var onResult = function onResult(event) {\n    setState({\n      status: 'recognizing',\n      transcript: event.results[0] && event.results[0][0] && event.results[0][0].transcript || '',\n      isSpeechFinal: event.results[0] && event.results[0].isFinal\n    });\n\n    if (searchAsYouSpeak && state.transcript) {\n      onQueryChange(state.transcript);\n    }\n  };\n\n  var onEnd = function onEnd() {\n    if (!state.errorCode && state.transcript && !searchAsYouSpeak) {\n      onQueryChange(state.transcript);\n    }\n\n    if (state.status !== 'error') {\n      setState({\n        status: 'finished'\n      });\n    }\n  };\n\n  var start = function start() {\n    recognition = new SpeechRecognitionAPI();\n\n    if (!recognition) {\n      return;\n    }\n\n    resetState('askingPermission');\n    recognition.interimResults = true;\n\n    if (language) {\n      recognition.lang = language;\n    }\n\n    recognition.addEventListener('start', onStart);\n    recognition.addEventListener('error', onError);\n    recognition.addEventListener('result', onResult);\n    recognition.addEventListener('end', onEnd);\n    recognition.start();\n  };\n\n  var dispose = function dispose() {\n    if (!recognition) {\n      return;\n    }\n\n    recognition.stop();\n    recognition.removeEventListener('start', onStart);\n    recognition.removeEventListener('error', onError);\n    recognition.removeEventListener('result', onResult);\n    recognition.removeEventListener('end', onEnd);\n    recognition = undefined;\n  };\n\n  var stop = function stop() {\n    dispose(); // Because `dispose` removes event listeners, `end` listener is not called.\n    // So we're setting the `status` as `finished` here.\n    // If we don't do it, it will be still `waiting` or `recognizing`.\n\n    resetState('finished');\n  };\n\n  var toggleListening = function toggleListening() {\n    if (!isBrowserSupported()) {\n      return;\n    }\n\n    if (isListening()) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return {\n    getState: getState,\n    isBrowserSupported: isBrowserSupported,\n    isListening: isListening,\n    toggleListening: toggleListening,\n    dispose: dispose\n  };\n}"]},"metadata":{},"sourceType":"module"}