{"ast":null,"code":"import { defer } from './utils';\nexport default function createWidgetsManager(onWidgetsUpdate) {\n  var widgets = []; // Is an update scheduled?\n\n  var scheduled = false; // The state manager's updates need to be batched since more than one\n  // component can register or unregister widgets during the same tick.\n\n  function scheduleUpdate() {\n    if (scheduled) {\n      return;\n    }\n\n    scheduled = true;\n    defer(function () {\n      scheduled = false;\n      onWidgetsUpdate();\n    });\n  }\n\n  return {\n    registerWidget: function registerWidget(widget) {\n      widgets.push(widget);\n      scheduleUpdate();\n      return function unregisterWidget() {\n        widgets.splice(widgets.indexOf(widget), 1);\n        scheduleUpdate();\n      };\n    },\n    update: scheduleUpdate,\n    getWidgets: function getWidgets() {\n      return widgets;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/core/createWidgetsManager.js"],"names":["defer","createWidgetsManager","onWidgetsUpdate","widgets","scheduled","scheduleUpdate","registerWidget","widget","push","unregisterWidget","splice","indexOf","update","getWidgets"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,eAAe,SAASC,oBAAT,CAA8BC,eAA9B,EAA+C;AAC5D,MAAIC,OAAO,GAAG,EAAd,CAD4D,CAC1C;;AAElB,MAAIC,SAAS,GAAG,KAAhB,CAH4D,CAGrC;AACvB;;AAEA,WAASC,cAAT,GAA0B;AACxB,QAAID,SAAJ,EAAe;AACb;AACD;;AAEDA,IAAAA,SAAS,GAAG,IAAZ;AACAJ,IAAAA,KAAK,CAAC,YAAY;AAChBI,MAAAA,SAAS,GAAG,KAAZ;AACAF,MAAAA,eAAe;AAChB,KAHI,CAAL;AAID;;AAED,SAAO;AACLI,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AAC9CJ,MAAAA,OAAO,CAACK,IAAR,CAAaD,MAAb;AACAF,MAAAA,cAAc;AACd,aAAO,SAASI,gBAAT,GAA4B;AACjCN,QAAAA,OAAO,CAACO,MAAR,CAAeP,OAAO,CAACQ,OAAR,CAAgBJ,MAAhB,CAAf,EAAwC,CAAxC;AACAF,QAAAA,cAAc;AACf,OAHD;AAID,KARI;AASLO,IAAAA,MAAM,EAAEP,cATH;AAULQ,IAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,aAAOV,OAAP;AACD;AAZI,GAAP;AAcD","sourcesContent":["import { defer } from './utils';\nexport default function createWidgetsManager(onWidgetsUpdate) {\n  var widgets = []; // Is an update scheduled?\n\n  var scheduled = false; // The state manager's updates need to be batched since more than one\n  // component can register or unregister widgets during the same tick.\n\n  function scheduleUpdate() {\n    if (scheduled) {\n      return;\n    }\n\n    scheduled = true;\n    defer(function () {\n      scheduled = false;\n      onWidgetsUpdate();\n    });\n  }\n\n  return {\n    registerWidget: function registerWidget(widget) {\n      widgets.push(widget);\n      scheduleUpdate();\n      return function unregisterWidget() {\n        widgets.splice(widgets.indexOf(widget), 1);\n        scheduleUpdate();\n      };\n    },\n    update: scheduleUpdate,\n    getWidgets: function getWidgets() {\n      return widgets;\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}