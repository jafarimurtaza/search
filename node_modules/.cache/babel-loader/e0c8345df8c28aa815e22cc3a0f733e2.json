{"ast":null,"code":"import { getPropertyByPath } from './utils';\nexport var HIGHLIGHT_TAGS = {\n  highlightPreTag: \"<ais-highlight-0000000000>\",\n  highlightPostTag: \"</ais-highlight-0000000000>\"\n};\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\n\nfunction parseHighlightedAttribute(_ref) {\n  var preTag = _ref.preTag,\n      postTag = _ref.postTag,\n      _ref$highlightedValue = _ref.highlightedValue,\n      highlightedValue = _ref$highlightedValue === void 0 ? '' : _ref$highlightedValue;\n  var splitByPreTag = highlightedValue.split(preTag);\n  var firstValue = splitByPreTag.shift();\n  var elements = firstValue === '' ? [] : [{\n    value: firstValue,\n    isHighlighted: false\n  }];\n\n  if (postTag === preTag) {\n    var isHighlighted = true;\n    splitByPreTag.forEach(function (split) {\n      elements.push({\n        value: split,\n        isHighlighted: isHighlighted\n      });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(function (split) {\n      var splitByPostTag = split.split(postTag);\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\n\n\nexport function parseAlgoliaHit(_ref2) {\n  var _ref2$preTag = _ref2.preTag,\n      preTag = _ref2$preTag === void 0 ? '<em>' : _ref2$preTag,\n      _ref2$postTag = _ref2.postTag,\n      postTag = _ref2$postTag === void 0 ? '</em>' : _ref2$postTag,\n      highlightProperty = _ref2.highlightProperty,\n      attribute = _ref2.attribute,\n      hit = _ref2.hit;\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n  var highlightObject = getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(function (item) {\n      return parseHighlightedAttribute({\n        preTag: preTag,\n        postTag: postTag,\n        highlightedValue: item.value\n      });\n    });\n  }\n\n  return parseHighlightedAttribute({\n    preTag: preTag,\n    postTag: postTag,\n    highlightedValue: highlightObject.value\n  });\n}","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/core/highlight.js"],"names":["getPropertyByPath","HIGHLIGHT_TAGS","highlightPreTag","highlightPostTag","parseHighlightedAttribute","_ref","preTag","postTag","_ref$highlightedValue","highlightedValue","splitByPreTag","split","firstValue","shift","elements","value","isHighlighted","forEach","push","splitByPostTag","parseAlgoliaHit","_ref2","_ref2$preTag","_ref2$postTag","highlightProperty","attribute","hit","Error","highlightObject","Array","isArray","map","item"],"mappings":"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","sourcesContent":["import { getPropertyByPath } from './utils';\nexport var HIGHLIGHT_TAGS = {\n  highlightPreTag: \"<ais-highlight-0000000000>\",\n  highlightPostTag: \"</ais-highlight-0000000000>\"\n};\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\n\nfunction parseHighlightedAttribute(_ref) {\n  var preTag = _ref.preTag,\n      postTag = _ref.postTag,\n      _ref$highlightedValue = _ref.highlightedValue,\n      highlightedValue = _ref$highlightedValue === void 0 ? '' : _ref$highlightedValue;\n  var splitByPreTag = highlightedValue.split(preTag);\n  var firstValue = splitByPreTag.shift();\n  var elements = firstValue === '' ? [] : [{\n    value: firstValue,\n    isHighlighted: false\n  }];\n\n  if (postTag === preTag) {\n    var isHighlighted = true;\n    splitByPreTag.forEach(function (split) {\n      elements.push({\n        value: split,\n        isHighlighted: isHighlighted\n      });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(function (split) {\n      var splitByPostTag = split.split(postTag);\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\n\n\nexport function parseAlgoliaHit(_ref2) {\n  var _ref2$preTag = _ref2.preTag,\n      preTag = _ref2$preTag === void 0 ? '<em>' : _ref2$preTag,\n      _ref2$postTag = _ref2.postTag,\n      postTag = _ref2$postTag === void 0 ? '</em>' : _ref2$postTag,\n      highlightProperty = _ref2.highlightProperty,\n      attribute = _ref2.attribute,\n      hit = _ref2.hit;\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n  var highlightObject = getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(function (item) {\n      return parseHighlightedAttribute({\n        preTag: preTag,\n        postTag: postTag,\n        highlightedValue: item.value\n      });\n    });\n  }\n\n  return parseHighlightedAttribute({\n    preTag: preTag,\n    postTag: postTag,\n    highlightedValue: highlightObject.value\n  });\n}"]},"metadata":{},"sourceType":"module"}