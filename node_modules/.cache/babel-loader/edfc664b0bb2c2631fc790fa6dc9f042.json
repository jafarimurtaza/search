{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport { omit } from './utils';\nexport function getIndexId(context) {\n  return hasMultipleIndices(context) ? context.multiIndexContext.targetedIndex : context.ais.mainTargetedIndex;\n}\nexport function getResults(searchResults, context) {\n  if (searchResults.results) {\n    if (searchResults.results.hits) {\n      return searchResults.results;\n    }\n\n    var indexId = getIndexId(context);\n\n    if (searchResults.results[indexId]) {\n      return searchResults.results[indexId];\n    }\n  }\n\n  return null;\n}\nexport function hasMultipleIndices(context) {\n  return context && context.multiIndexContext;\n} // eslint-disable-next-line max-params\n\nexport function refineValue(searchState, nextRefinement, context, resetPage, namespace) {\n  if (hasMultipleIndices(context)) {\n    var indexId = getIndexId(context);\n    return namespace ? refineMultiIndexWithNamespace(searchState, nextRefinement, indexId, resetPage, namespace) : refineMultiIndex(searchState, nextRefinement, indexId, resetPage);\n  } else {\n    // When we have a multi index page with shared widgets we should also\n    // reset their page to 1 if the resetPage is provided. Otherwise the\n    // indices will always be reset\n    // see: https://github.com/algolia/react-instantsearch/issues/310\n    // see: https://github.com/algolia/react-instantsearch/issues/637\n    if (searchState.indices && resetPage) {\n      Object.keys(searchState.indices).forEach(function (targetedIndex) {\n        searchState = refineValue(searchState, {\n          page: 1\n        }, {\n          multiIndexContext: {\n            targetedIndex: targetedIndex\n          }\n        }, true, namespace);\n      });\n    }\n\n    return namespace ? refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace) : refineSingleIndex(searchState, nextRefinement, resetPage);\n  }\n}\n\nfunction refineMultiIndex(searchState, nextRefinement, indexId, resetPage) {\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  var state = searchState.indices && searchState.indices[indexId] ? _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, searchState.indices[indexId], nextRefinement, page))) : _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, nextRefinement, page)));\n  return _objectSpread({}, searchState, {\n    indices: state\n  });\n}\n\nfunction refineSingleIndex(searchState, nextRefinement, resetPage) {\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  return _objectSpread({}, searchState, nextRefinement, page);\n} // eslint-disable-next-line max-params\n\n\nfunction refineMultiIndexWithNamespace(searchState, nextRefinement, indexId, resetPage, namespace) {\n  var _objectSpread4;\n\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  var state = searchState.indices && searchState.indices[indexId] ? _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, searchState.indices[indexId], (_objectSpread4 = {}, _defineProperty(_objectSpread4, namespace, _objectSpread({}, searchState.indices[indexId][namespace], nextRefinement)), _defineProperty(_objectSpread4, \"page\", 1), _objectSpread4)))) : _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread(_defineProperty({}, namespace, nextRefinement), page)));\n  return _objectSpread({}, searchState, {\n    indices: state\n  });\n}\n\nfunction refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace) {\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  return _objectSpread({}, searchState, _defineProperty({}, namespace, _objectSpread({}, searchState[namespace], nextRefinement)), page);\n}\n\nfunction getNamespaceAndAttributeName(id) {\n  var parts = id.match(/^([^.]*)\\.(.*)/);\n  var namespace = parts && parts[1];\n  var attributeName = parts && parts[2];\n  return {\n    namespace: namespace,\n    attributeName: attributeName\n  };\n}\n\nfunction hasRefinements(_ref) {\n  var multiIndex = _ref.multiIndex,\n      indexId = _ref.indexId,\n      namespace = _ref.namespace,\n      attributeName = _ref.attributeName,\n      id = _ref.id,\n      searchState = _ref.searchState;\n\n  if (multiIndex && namespace) {\n    return searchState.indices && searchState.indices[indexId] && searchState.indices[indexId][namespace] && Object.hasOwnProperty.call(searchState.indices[indexId][namespace], attributeName);\n  }\n\n  if (multiIndex) {\n    return searchState.indices && searchState.indices[indexId] && Object.hasOwnProperty.call(searchState.indices[indexId], id);\n  }\n\n  if (namespace) {\n    return searchState[namespace] && Object.hasOwnProperty.call(searchState[namespace], attributeName);\n  }\n\n  return Object.hasOwnProperty.call(searchState, id);\n}\n\nfunction getRefinements(_ref2) {\n  var multiIndex = _ref2.multiIndex,\n      indexId = _ref2.indexId,\n      namespace = _ref2.namespace,\n      attributeName = _ref2.attributeName,\n      id = _ref2.id,\n      searchState = _ref2.searchState;\n\n  if (multiIndex && namespace) {\n    return searchState.indices[indexId][namespace][attributeName];\n  }\n\n  if (multiIndex) {\n    return searchState.indices[indexId][id];\n  }\n\n  if (namespace) {\n    return searchState[namespace][attributeName];\n  }\n\n  return searchState[id];\n}\n\nexport function getCurrentRefinementValue(props, searchState, context, id, defaultValue) {\n  var indexId = getIndexId(context);\n\n  var _getNamespaceAndAttri = getNamespaceAndAttributeName(id),\n      namespace = _getNamespaceAndAttri.namespace,\n      attributeName = _getNamespaceAndAttri.attributeName;\n\n  var multiIndex = hasMultipleIndices(context);\n  var args = {\n    multiIndex: multiIndex,\n    indexId: indexId,\n    namespace: namespace,\n    attributeName: attributeName,\n    id: id,\n    searchState: searchState\n  };\n  var hasRefinementsValue = hasRefinements(args);\n\n  if (hasRefinementsValue) {\n    return getRefinements(args);\n  }\n\n  if (props.defaultRefinement) {\n    return props.defaultRefinement;\n  }\n\n  return defaultValue;\n}\nexport function cleanUpValue(searchState, context, id) {\n  var indexId = getIndexId(context);\n\n  var _getNamespaceAndAttri2 = getNamespaceAndAttributeName(id),\n      namespace = _getNamespaceAndAttri2.namespace,\n      attributeName = _getNamespaceAndAttri2.attributeName;\n\n  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {\n    return cleanUpValueWithMultiIndex({\n      attribute: attributeName,\n      searchState: searchState,\n      indexId: indexId,\n      id: id,\n      namespace: namespace\n    });\n  }\n\n  return cleanUpValueWithSingleIndex({\n    attribute: attributeName,\n    searchState: searchState,\n    id: id,\n    namespace: namespace\n  });\n}\n\nfunction cleanUpValueWithSingleIndex(_ref3) {\n  var searchState = _ref3.searchState,\n      id = _ref3.id,\n      namespace = _ref3.namespace,\n      attribute = _ref3.attribute;\n\n  if (namespace) {\n    return _objectSpread({}, searchState, _defineProperty({}, namespace, omit(searchState[namespace], [attribute])));\n  }\n\n  return omit(searchState, [id]);\n}\n\nfunction cleanUpValueWithMultiIndex(_ref4) {\n  var searchState = _ref4.searchState,\n      indexId = _ref4.indexId,\n      id = _ref4.id,\n      namespace = _ref4.namespace,\n      attribute = _ref4.attribute;\n  var indexSearchState = searchState.indices[indexId];\n\n  if (namespace && indexSearchState) {\n    return _objectSpread({}, searchState, {\n      indices: _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, indexSearchState, _defineProperty({}, namespace, omit(indexSearchState[namespace], [attribute])))))\n    });\n  }\n\n  if (indexSearchState) {\n    return _objectSpread({}, searchState, {\n      indices: _objectSpread({}, searchState.indices, _defineProperty({}, indexId, omit(indexSearchState, [id])))\n    });\n  }\n\n  return searchState;\n}","map":{"version":3,"sources":["C:/Users/Murtaza Jafari/Desktop/product-search/product/searcbox/node_modules/react-instantsearch-core/dist/es/core/indexUtils.js"],"names":["_defineProperty","_objectSpread","omit","getIndexId","context","hasMultipleIndices","multiIndexContext","targetedIndex","ais","mainTargetedIndex","getResults","searchResults","results","hits","indexId","refineValue","searchState","nextRefinement","resetPage","namespace","refineMultiIndexWithNamespace","refineMultiIndex","indices","Object","keys","forEach","page","refineSingleIndexWithNamespace","refineSingleIndex","undefined","state","_objectSpread4","getNamespaceAndAttributeName","id","parts","match","attributeName","hasRefinements","_ref","multiIndex","hasOwnProperty","call","getRefinements","_ref2","getCurrentRefinementValue","props","defaultValue","_getNamespaceAndAttri","args","hasRefinementsValue","defaultRefinement","cleanUpValue","_getNamespaceAndAttri2","Boolean","cleanUpValueWithMultiIndex","attribute","cleanUpValueWithSingleIndex","_ref3","_ref4","indexSearchState"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAClC,SAAOC,kBAAkB,CAACD,OAAD,CAAlB,GAA8BA,OAAO,CAACE,iBAAR,CAA0BC,aAAxD,GAAwEH,OAAO,CAACI,GAAR,CAAYC,iBAA3F;AACD;AACD,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAmCP,OAAnC,EAA4C;AACjD,MAAIO,aAAa,CAACC,OAAlB,EAA2B;AACzB,QAAID,aAAa,CAACC,OAAd,CAAsBC,IAA1B,EAAgC;AAC9B,aAAOF,aAAa,CAACC,OAArB;AACD;;AAED,QAAIE,OAAO,GAAGX,UAAU,CAACC,OAAD,CAAxB;;AAEA,QAAIO,aAAa,CAACC,OAAd,CAAsBE,OAAtB,CAAJ,EAAoC;AAClC,aAAOH,aAAa,CAACC,OAAd,CAAsBE,OAAtB,CAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AACD,OAAO,SAAST,kBAAT,CAA4BD,OAA5B,EAAqC;AAC1C,SAAOA,OAAO,IAAIA,OAAO,CAACE,iBAA1B;AACD,C,CAAC;;AAEF,OAAO,SAASS,WAAT,CAAqBC,WAArB,EAAkCC,cAAlC,EAAkDb,OAAlD,EAA2Dc,SAA3D,EAAsEC,SAAtE,EAAiF;AACtF,MAAId,kBAAkB,CAACD,OAAD,CAAtB,EAAiC;AAC/B,QAAIU,OAAO,GAAGX,UAAU,CAACC,OAAD,CAAxB;AACA,WAAOe,SAAS,GAAGC,6BAA6B,CAACJ,WAAD,EAAcC,cAAd,EAA8BH,OAA9B,EAAuCI,SAAvC,EAAkDC,SAAlD,CAAhC,GAA+FE,gBAAgB,CAACL,WAAD,EAAcC,cAAd,EAA8BH,OAA9B,EAAuCI,SAAvC,CAA/H;AACD,GAHD,MAGO;AACL;AACA;AACA;AACA;AACA;AACA,QAAIF,WAAW,CAACM,OAAZ,IAAuBJ,SAA3B,EAAsC;AACpCK,MAAAA,MAAM,CAACC,IAAP,CAAYR,WAAW,CAACM,OAAxB,EAAiCG,OAAjC,CAAyC,UAAUlB,aAAV,EAAyB;AAChES,QAAAA,WAAW,GAAGD,WAAW,CAACC,WAAD,EAAc;AACrCU,UAAAA,IAAI,EAAE;AAD+B,SAAd,EAEtB;AACDpB,UAAAA,iBAAiB,EAAE;AACjBC,YAAAA,aAAa,EAAEA;AADE;AADlB,SAFsB,EAMtB,IANsB,EAMhBY,SANgB,CAAzB;AAOD,OARD;AASD;;AAED,WAAOA,SAAS,GAAGQ,8BAA8B,CAACX,WAAD,EAAcC,cAAd,EAA8BC,SAA9B,EAAyCC,SAAzC,CAAjC,GAAuFS,iBAAiB,CAACZ,WAAD,EAAcC,cAAd,EAA8BC,SAA9B,CAAxH;AACD;AACF;;AAED,SAASG,gBAAT,CAA0BL,WAA1B,EAAuCC,cAAvC,EAAuDH,OAAvD,EAAgEI,SAAhE,EAA2E;AACzE,MAAIQ,IAAI,GAAGR,SAAS,GAAG;AACrBQ,IAAAA,IAAI,EAAE;AADe,GAAH,GAEhBG,SAFJ;AAGA,MAAIC,KAAK,GAAGd,WAAW,CAACM,OAAZ,IAAuBN,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAvB,GAAsDb,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAjB,EAA0BtB,eAAe,CAAC,EAAD,EAAKc,OAAL,EAAcb,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAL,EAAmCG,cAAnC,EAAmDS,IAAnD,CAA3B,CAAzC,CAAnE,GAAoMzB,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAjB,EAA0BtB,eAAe,CAAC,EAAD,EAAKc,OAAL,EAAcb,aAAa,CAAC,EAAD,EAAKgB,cAAL,EAAqBS,IAArB,CAA3B,CAAzC,CAA7N;AACA,SAAOzB,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkB;AACpCM,IAAAA,OAAO,EAAEQ;AAD2B,GAAlB,CAApB;AAGD;;AAED,SAASF,iBAAT,CAA2BZ,WAA3B,EAAwCC,cAAxC,EAAwDC,SAAxD,EAAmE;AACjE,MAAIQ,IAAI,GAAGR,SAAS,GAAG;AACrBQ,IAAAA,IAAI,EAAE;AADe,GAAH,GAEhBG,SAFJ;AAGA,SAAO5B,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkBC,cAAlB,EAAkCS,IAAlC,CAApB;AACD,C,CAAC;;;AAGF,SAASN,6BAAT,CAAuCJ,WAAvC,EAAoDC,cAApD,EAAoEH,OAApE,EAA6EI,SAA7E,EAAwFC,SAAxF,EAAmG;AACjG,MAAIY,cAAJ;;AAEA,MAAIL,IAAI,GAAGR,SAAS,GAAG;AACrBQ,IAAAA,IAAI,EAAE;AADe,GAAH,GAEhBG,SAFJ;AAGA,MAAIC,KAAK,GAAGd,WAAW,CAACM,OAAZ,IAAuBN,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAvB,GAAsDb,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAjB,EAA0BtB,eAAe,CAAC,EAAD,EAAKc,OAAL,EAAcb,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAL,GAAoCiB,cAAc,GAAG,EAAjB,EAAqB/B,eAAe,CAAC+B,cAAD,EAAiBZ,SAAjB,EAA4BlB,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAZ,CAAoBR,OAApB,EAA6BK,SAA7B,CAAL,EAA8CF,cAA9C,CAAzC,CAApC,EAA6IjB,eAAe,CAAC+B,cAAD,EAAiB,MAAjB,EAAyB,CAAzB,CAA5J,EAAyLA,cAA7N,EAA3B,CAAzC,CAAnE,GAAyX9B,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAjB,EAA0BtB,eAAe,CAAC,EAAD,EAAKc,OAAL,EAAcb,aAAa,CAACD,eAAe,CAAC,EAAD,EAAKmB,SAAL,EAAgBF,cAAhB,CAAhB,EAAiDS,IAAjD,CAA3B,CAAzC,CAAlZ;AACA,SAAOzB,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkB;AACpCM,IAAAA,OAAO,EAAEQ;AAD2B,GAAlB,CAApB;AAGD;;AAED,SAASH,8BAAT,CAAwCX,WAAxC,EAAqDC,cAArD,EAAqEC,SAArE,EAAgFC,SAAhF,EAA2F;AACzF,MAAIO,IAAI,GAAGR,SAAS,GAAG;AACrBQ,IAAAA,IAAI,EAAE;AADe,GAAH,GAEhBG,SAFJ;AAGA,SAAO5B,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkBhB,eAAe,CAAC,EAAD,EAAKmB,SAAL,EAAgBlB,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACG,SAAD,CAAhB,EAA6BF,cAA7B,CAA7B,CAAjC,EAA6GS,IAA7G,CAApB;AACD;;AAED,SAASM,4BAAT,CAAsCC,EAAtC,EAA0C;AACxC,MAAIC,KAAK,GAAGD,EAAE,CAACE,KAAH,CAAS,gBAAT,CAAZ;AACA,MAAIhB,SAAS,GAAGe,KAAK,IAAIA,KAAK,CAAC,CAAD,CAA9B;AACA,MAAIE,aAAa,GAAGF,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlC;AACA,SAAO;AACLf,IAAAA,SAAS,EAAEA,SADN;AAELiB,IAAAA,aAAa,EAAEA;AAFV,GAAP;AAID;;AAED,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;AAAA,MACIzB,OAAO,GAAGwB,IAAI,CAACxB,OADnB;AAAA,MAEIK,SAAS,GAAGmB,IAAI,CAACnB,SAFrB;AAAA,MAGIiB,aAAa,GAAGE,IAAI,CAACF,aAHzB;AAAA,MAIIH,EAAE,GAAGK,IAAI,CAACL,EAJd;AAAA,MAKIjB,WAAW,GAAGsB,IAAI,CAACtB,WALvB;;AAOA,MAAIuB,UAAU,IAAIpB,SAAlB,EAA6B;AAC3B,WAAOH,WAAW,CAACM,OAAZ,IAAuBN,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAvB,IAAuDE,WAAW,CAACM,OAAZ,CAAoBR,OAApB,EAA6BK,SAA7B,CAAvD,IAAkGI,MAAM,CAACiB,cAAP,CAAsBC,IAAtB,CAA2BzB,WAAW,CAACM,OAAZ,CAAoBR,OAApB,EAA6BK,SAA7B,CAA3B,EAAoEiB,aAApE,CAAzG;AACD;;AAED,MAAIG,UAAJ,EAAgB;AACd,WAAOvB,WAAW,CAACM,OAAZ,IAAuBN,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAvB,IAAuDS,MAAM,CAACiB,cAAP,CAAsBC,IAAtB,CAA2BzB,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAA3B,EAAyDmB,EAAzD,CAA9D;AACD;;AAED,MAAId,SAAJ,EAAe;AACb,WAAOH,WAAW,CAACG,SAAD,CAAX,IAA0BI,MAAM,CAACiB,cAAP,CAAsBC,IAAtB,CAA2BzB,WAAW,CAACG,SAAD,CAAtC,EAAmDiB,aAAnD,CAAjC;AACD;;AAED,SAAOb,MAAM,CAACiB,cAAP,CAAsBC,IAAtB,CAA2BzB,WAA3B,EAAwCiB,EAAxC,CAAP;AACD;;AAED,SAASS,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIJ,UAAU,GAAGI,KAAK,CAACJ,UAAvB;AAAA,MACIzB,OAAO,GAAG6B,KAAK,CAAC7B,OADpB;AAAA,MAEIK,SAAS,GAAGwB,KAAK,CAACxB,SAFtB;AAAA,MAGIiB,aAAa,GAAGO,KAAK,CAACP,aAH1B;AAAA,MAIIH,EAAE,GAAGU,KAAK,CAACV,EAJf;AAAA,MAKIjB,WAAW,GAAG2B,KAAK,CAAC3B,WALxB;;AAOA,MAAIuB,UAAU,IAAIpB,SAAlB,EAA6B;AAC3B,WAAOH,WAAW,CAACM,OAAZ,CAAoBR,OAApB,EAA6BK,SAA7B,EAAwCiB,aAAxC,CAAP;AACD;;AAED,MAAIG,UAAJ,EAAgB;AACd,WAAOvB,WAAW,CAACM,OAAZ,CAAoBR,OAApB,EAA6BmB,EAA7B,CAAP;AACD;;AAED,MAAId,SAAJ,EAAe;AACb,WAAOH,WAAW,CAACG,SAAD,CAAX,CAAuBiB,aAAvB,CAAP;AACD;;AAED,SAAOpB,WAAW,CAACiB,EAAD,CAAlB;AACD;;AAED,OAAO,SAASW,yBAAT,CAAmCC,KAAnC,EAA0C7B,WAA1C,EAAuDZ,OAAvD,EAAgE6B,EAAhE,EAAoEa,YAApE,EAAkF;AACvF,MAAIhC,OAAO,GAAGX,UAAU,CAACC,OAAD,CAAxB;;AAEA,MAAI2C,qBAAqB,GAAGf,4BAA4B,CAACC,EAAD,CAAxD;AAAA,MACId,SAAS,GAAG4B,qBAAqB,CAAC5B,SADtC;AAAA,MAEIiB,aAAa,GAAGW,qBAAqB,CAACX,aAF1C;;AAIA,MAAIG,UAAU,GAAGlC,kBAAkB,CAACD,OAAD,CAAnC;AACA,MAAI4C,IAAI,GAAG;AACTT,IAAAA,UAAU,EAAEA,UADH;AAETzB,IAAAA,OAAO,EAAEA,OAFA;AAGTK,IAAAA,SAAS,EAAEA,SAHF;AAITiB,IAAAA,aAAa,EAAEA,aAJN;AAKTH,IAAAA,EAAE,EAAEA,EALK;AAMTjB,IAAAA,WAAW,EAAEA;AANJ,GAAX;AAQA,MAAIiC,mBAAmB,GAAGZ,cAAc,CAACW,IAAD,CAAxC;;AAEA,MAAIC,mBAAJ,EAAyB;AACvB,WAAOP,cAAc,CAACM,IAAD,CAArB;AACD;;AAED,MAAIH,KAAK,CAACK,iBAAV,EAA6B;AAC3B,WAAOL,KAAK,CAACK,iBAAb;AACD;;AAED,SAAOJ,YAAP;AACD;AACD,OAAO,SAASK,YAAT,CAAsBnC,WAAtB,EAAmCZ,OAAnC,EAA4C6B,EAA5C,EAAgD;AACrD,MAAInB,OAAO,GAAGX,UAAU,CAACC,OAAD,CAAxB;;AAEA,MAAIgD,sBAAsB,GAAGpB,4BAA4B,CAACC,EAAD,CAAzD;AAAA,MACId,SAAS,GAAGiC,sBAAsB,CAACjC,SADvC;AAAA,MAEIiB,aAAa,GAAGgB,sBAAsB,CAAChB,aAF3C;;AAIA,MAAI/B,kBAAkB,CAACD,OAAD,CAAlB,IAA+BiD,OAAO,CAACrC,WAAW,CAACM,OAAb,CAA1C,EAAiE;AAC/D,WAAOgC,0BAA0B,CAAC;AAChCC,MAAAA,SAAS,EAAEnB,aADqB;AAEhCpB,MAAAA,WAAW,EAAEA,WAFmB;AAGhCF,MAAAA,OAAO,EAAEA,OAHuB;AAIhCmB,MAAAA,EAAE,EAAEA,EAJ4B;AAKhCd,MAAAA,SAAS,EAAEA;AALqB,KAAD,CAAjC;AAOD;;AAED,SAAOqC,2BAA2B,CAAC;AACjCD,IAAAA,SAAS,EAAEnB,aADsB;AAEjCpB,IAAAA,WAAW,EAAEA,WAFoB;AAGjCiB,IAAAA,EAAE,EAAEA,EAH6B;AAIjCd,IAAAA,SAAS,EAAEA;AAJsB,GAAD,CAAlC;AAMD;;AAED,SAASqC,2BAAT,CAAqCC,KAArC,EAA4C;AAC1C,MAAIzC,WAAW,GAAGyC,KAAK,CAACzC,WAAxB;AAAA,MACIiB,EAAE,GAAGwB,KAAK,CAACxB,EADf;AAAA,MAEId,SAAS,GAAGsC,KAAK,CAACtC,SAFtB;AAAA,MAGIoC,SAAS,GAAGE,KAAK,CAACF,SAHtB;;AAKA,MAAIpC,SAAJ,EAAe;AACb,WAAOlB,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkBhB,eAAe,CAAC,EAAD,EAAKmB,SAAL,EAAgBjB,IAAI,CAACc,WAAW,CAACG,SAAD,CAAZ,EAAyB,CAACoC,SAAD,CAAzB,CAApB,CAAjC,CAApB;AACD;;AAED,SAAOrD,IAAI,CAACc,WAAD,EAAc,CAACiB,EAAD,CAAd,CAAX;AACD;;AAED,SAASqB,0BAAT,CAAoCI,KAApC,EAA2C;AACzC,MAAI1C,WAAW,GAAG0C,KAAK,CAAC1C,WAAxB;AAAA,MACIF,OAAO,GAAG4C,KAAK,CAAC5C,OADpB;AAAA,MAEImB,EAAE,GAAGyB,KAAK,CAACzB,EAFf;AAAA,MAGId,SAAS,GAAGuC,KAAK,CAACvC,SAHtB;AAAA,MAIIoC,SAAS,GAAGG,KAAK,CAACH,SAJtB;AAKA,MAAII,gBAAgB,GAAG3C,WAAW,CAACM,OAAZ,CAAoBR,OAApB,CAAvB;;AAEA,MAAIK,SAAS,IAAIwC,gBAAjB,EAAmC;AACjC,WAAO1D,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkB;AACpCM,MAAAA,OAAO,EAAErB,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAjB,EAA0BtB,eAAe,CAAC,EAAD,EAAKc,OAAL,EAAcb,aAAa,CAAC,EAAD,EAAK0D,gBAAL,EAAuB3D,eAAe,CAAC,EAAD,EAAKmB,SAAL,EAAgBjB,IAAI,CAACyD,gBAAgB,CAACxC,SAAD,CAAjB,EAA8B,CAACoC,SAAD,CAA9B,CAApB,CAAtC,CAA3B,CAAzC;AADc,KAAlB,CAApB;AAGD;;AAED,MAAII,gBAAJ,EAAsB;AACpB,WAAO1D,aAAa,CAAC,EAAD,EAAKe,WAAL,EAAkB;AACpCM,MAAAA,OAAO,EAAErB,aAAa,CAAC,EAAD,EAAKe,WAAW,CAACM,OAAjB,EAA0BtB,eAAe,CAAC,EAAD,EAAKc,OAAL,EAAcZ,IAAI,CAACyD,gBAAD,EAAmB,CAAC1B,EAAD,CAAnB,CAAlB,CAAzC;AADc,KAAlB,CAApB;AAGD;;AAED,SAAOjB,WAAP;AACD","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport { omit } from './utils';\nexport function getIndexId(context) {\n  return hasMultipleIndices(context) ? context.multiIndexContext.targetedIndex : context.ais.mainTargetedIndex;\n}\nexport function getResults(searchResults, context) {\n  if (searchResults.results) {\n    if (searchResults.results.hits) {\n      return searchResults.results;\n    }\n\n    var indexId = getIndexId(context);\n\n    if (searchResults.results[indexId]) {\n      return searchResults.results[indexId];\n    }\n  }\n\n  return null;\n}\nexport function hasMultipleIndices(context) {\n  return context && context.multiIndexContext;\n} // eslint-disable-next-line max-params\n\nexport function refineValue(searchState, nextRefinement, context, resetPage, namespace) {\n  if (hasMultipleIndices(context)) {\n    var indexId = getIndexId(context);\n    return namespace ? refineMultiIndexWithNamespace(searchState, nextRefinement, indexId, resetPage, namespace) : refineMultiIndex(searchState, nextRefinement, indexId, resetPage);\n  } else {\n    // When we have a multi index page with shared widgets we should also\n    // reset their page to 1 if the resetPage is provided. Otherwise the\n    // indices will always be reset\n    // see: https://github.com/algolia/react-instantsearch/issues/310\n    // see: https://github.com/algolia/react-instantsearch/issues/637\n    if (searchState.indices && resetPage) {\n      Object.keys(searchState.indices).forEach(function (targetedIndex) {\n        searchState = refineValue(searchState, {\n          page: 1\n        }, {\n          multiIndexContext: {\n            targetedIndex: targetedIndex\n          }\n        }, true, namespace);\n      });\n    }\n\n    return namespace ? refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace) : refineSingleIndex(searchState, nextRefinement, resetPage);\n  }\n}\n\nfunction refineMultiIndex(searchState, nextRefinement, indexId, resetPage) {\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  var state = searchState.indices && searchState.indices[indexId] ? _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, searchState.indices[indexId], nextRefinement, page))) : _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, nextRefinement, page)));\n  return _objectSpread({}, searchState, {\n    indices: state\n  });\n}\n\nfunction refineSingleIndex(searchState, nextRefinement, resetPage) {\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  return _objectSpread({}, searchState, nextRefinement, page);\n} // eslint-disable-next-line max-params\n\n\nfunction refineMultiIndexWithNamespace(searchState, nextRefinement, indexId, resetPage, namespace) {\n  var _objectSpread4;\n\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  var state = searchState.indices && searchState.indices[indexId] ? _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, searchState.indices[indexId], (_objectSpread4 = {}, _defineProperty(_objectSpread4, namespace, _objectSpread({}, searchState.indices[indexId][namespace], nextRefinement)), _defineProperty(_objectSpread4, \"page\", 1), _objectSpread4)))) : _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread(_defineProperty({}, namespace, nextRefinement), page)));\n  return _objectSpread({}, searchState, {\n    indices: state\n  });\n}\n\nfunction refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace) {\n  var page = resetPage ? {\n    page: 1\n  } : undefined;\n  return _objectSpread({}, searchState, _defineProperty({}, namespace, _objectSpread({}, searchState[namespace], nextRefinement)), page);\n}\n\nfunction getNamespaceAndAttributeName(id) {\n  var parts = id.match(/^([^.]*)\\.(.*)/);\n  var namespace = parts && parts[1];\n  var attributeName = parts && parts[2];\n  return {\n    namespace: namespace,\n    attributeName: attributeName\n  };\n}\n\nfunction hasRefinements(_ref) {\n  var multiIndex = _ref.multiIndex,\n      indexId = _ref.indexId,\n      namespace = _ref.namespace,\n      attributeName = _ref.attributeName,\n      id = _ref.id,\n      searchState = _ref.searchState;\n\n  if (multiIndex && namespace) {\n    return searchState.indices && searchState.indices[indexId] && searchState.indices[indexId][namespace] && Object.hasOwnProperty.call(searchState.indices[indexId][namespace], attributeName);\n  }\n\n  if (multiIndex) {\n    return searchState.indices && searchState.indices[indexId] && Object.hasOwnProperty.call(searchState.indices[indexId], id);\n  }\n\n  if (namespace) {\n    return searchState[namespace] && Object.hasOwnProperty.call(searchState[namespace], attributeName);\n  }\n\n  return Object.hasOwnProperty.call(searchState, id);\n}\n\nfunction getRefinements(_ref2) {\n  var multiIndex = _ref2.multiIndex,\n      indexId = _ref2.indexId,\n      namespace = _ref2.namespace,\n      attributeName = _ref2.attributeName,\n      id = _ref2.id,\n      searchState = _ref2.searchState;\n\n  if (multiIndex && namespace) {\n    return searchState.indices[indexId][namespace][attributeName];\n  }\n\n  if (multiIndex) {\n    return searchState.indices[indexId][id];\n  }\n\n  if (namespace) {\n    return searchState[namespace][attributeName];\n  }\n\n  return searchState[id];\n}\n\nexport function getCurrentRefinementValue(props, searchState, context, id, defaultValue) {\n  var indexId = getIndexId(context);\n\n  var _getNamespaceAndAttri = getNamespaceAndAttributeName(id),\n      namespace = _getNamespaceAndAttri.namespace,\n      attributeName = _getNamespaceAndAttri.attributeName;\n\n  var multiIndex = hasMultipleIndices(context);\n  var args = {\n    multiIndex: multiIndex,\n    indexId: indexId,\n    namespace: namespace,\n    attributeName: attributeName,\n    id: id,\n    searchState: searchState\n  };\n  var hasRefinementsValue = hasRefinements(args);\n\n  if (hasRefinementsValue) {\n    return getRefinements(args);\n  }\n\n  if (props.defaultRefinement) {\n    return props.defaultRefinement;\n  }\n\n  return defaultValue;\n}\nexport function cleanUpValue(searchState, context, id) {\n  var indexId = getIndexId(context);\n\n  var _getNamespaceAndAttri2 = getNamespaceAndAttributeName(id),\n      namespace = _getNamespaceAndAttri2.namespace,\n      attributeName = _getNamespaceAndAttri2.attributeName;\n\n  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {\n    return cleanUpValueWithMultiIndex({\n      attribute: attributeName,\n      searchState: searchState,\n      indexId: indexId,\n      id: id,\n      namespace: namespace\n    });\n  }\n\n  return cleanUpValueWithSingleIndex({\n    attribute: attributeName,\n    searchState: searchState,\n    id: id,\n    namespace: namespace\n  });\n}\n\nfunction cleanUpValueWithSingleIndex(_ref3) {\n  var searchState = _ref3.searchState,\n      id = _ref3.id,\n      namespace = _ref3.namespace,\n      attribute = _ref3.attribute;\n\n  if (namespace) {\n    return _objectSpread({}, searchState, _defineProperty({}, namespace, omit(searchState[namespace], [attribute])));\n  }\n\n  return omit(searchState, [id]);\n}\n\nfunction cleanUpValueWithMultiIndex(_ref4) {\n  var searchState = _ref4.searchState,\n      indexId = _ref4.indexId,\n      id = _ref4.id,\n      namespace = _ref4.namespace,\n      attribute = _ref4.attribute;\n  var indexSearchState = searchState.indices[indexId];\n\n  if (namespace && indexSearchState) {\n    return _objectSpread({}, searchState, {\n      indices: _objectSpread({}, searchState.indices, _defineProperty({}, indexId, _objectSpread({}, indexSearchState, _defineProperty({}, namespace, omit(indexSearchState[namespace], [attribute])))))\n    });\n  }\n\n  if (indexSearchState) {\n    return _objectSpread({}, searchState, {\n      indices: _objectSpread({}, searchState.indices, _defineProperty({}, indexId, omit(indexSearchState, [id])))\n    });\n  }\n\n  return searchState;\n}"]},"metadata":{},"sourceType":"module"}